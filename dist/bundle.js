/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// import './widget.css';\r\n\r\nfunction getBrowserLanguage() {\r\n    return navigator.language || navigator.userLanguage || 'en';\r\n}\r\n\r\nfunction initializeChatWidget() {\r\n    const container = document.getElementById('chat-widget-container');\r\n    if (!container) {\r\n        console.error('Chat widget container not found');\r\n        return;\r\n    }\r\n\r\n    const botId = container.getAttribute('data-user-id');\r\n    const themeColor = container.getAttribute('data-theme-color') || '#0082ba';\r\n    const hoverColor = container.getAttribute('data-hover-color') || '#0595d3';\r\n    if (!botId) {\r\n        console.error('User ID not found');\r\n        return;\r\n    }\r\n\r\n    const browserLanguage = getBrowserLanguage();\r\n    console.log(browserLanguage)\r\n\r\n    const chatWidgetIcon = document.createElement('div');\r\n    chatWidgetIcon.className = 'chat-widget-icon';\r\n    chatWidgetIcon.innerHTML = `<img src=\"https://robert-kloepsch.github.io/swiss_bot_widget/dist/cloud.png\" style=\"height: 100px; margin-top: 7px;\">`;\r\n\r\n    const chatOverlay = document.createElement('div');\r\n    chatOverlay.className = 'chat-overlay hidden';\r\n\r\n    const chatWindow = document.createElement('div');\r\n    chatWindow.className = 'chat-window hidden';\r\n\r\n    chatWindow.innerHTML = `\r\n        <div class=\"chat-header\">\r\n            <div class=\"chat-header-title\">\r\n                <span class=\"chat-title\">Chat with us!</span>\r\n                <button class=\"close-btn close-chat-widget-icon\">X</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"chat-body\"></div>\r\n        <div class=\"chat-footer\">\r\n            <div class=\"powered-by\">\r\n                <span class=\"powered-by-text\" onclick=\"window.open('http://landing.swiss-bot.com/', '_blank')\">Powered by Swiss Chatbot Factory</span>\r\n            </div>\r\n            <div class=\"input-send-container\">\r\n                <input type=\"text\" class=\"chat-input\" placeholder=\"Type your message...\">\r\n                <button class=\"send-message\"><i class=\"widget-send-icon\">Send</i></button>\r\n            </div>\r\n        </div>\r\n    `;\r\n\r\n    // Inject dynamic styles\r\n    const style = document.createElement('style');\r\n    style.innerHTML = `\r\n        .chat-widget-icon {\r\n            background-color: ${themeColor};\r\n        }\r\n\r\n        .chat-header {\r\n            background-color: ${themeColor};\r\n        }\r\n\r\n        .chat-footer button {\r\n            background-color: ${themeColor};\r\n        }\r\n\r\n        .widget-user-message {\r\n            background-color: ${themeColor};\r\n        }\r\n\r\n        .loading-dots div {\r\n            background-color: ${themeColor};\r\n        }\r\n\r\n        .chat-footer button:hover {\r\n            background-color: ${hoverColor};\r\n        }\r\n    `;\r\n    document.head.appendChild(style);\r\n\r\n    container.appendChild(chatWidgetIcon);\r\n    container.appendChild(chatOverlay);\r\n    container.appendChild(chatWindow);\r\n\r\n    const closeChatBtn = chatWindow.querySelector('.close-btn');\r\n    const chatBody = chatWindow.querySelector('.chat-body');\r\n    const chatInput = chatWindow.querySelector('.chat-footer input');\r\n    const sendMessageBtn = chatWindow.querySelector('.send-message');\r\n    let sessionId = generateSessionId();\r\n    let currentBotMessage = '';\r\n\r\n    chatWidgetIcon.addEventListener('click', function () {\r\n        chatWindow.classList.remove('hidden');\r\n        forceReflow(chatWindow);\r\n        chatWindow.classList.add('show');\r\n        chatOverlay.classList.remove('hidden');\r\n        document.body.classList.add('no-scroll');\r\n        if (chatBody.childElementCount === 0) {\r\n            fetchWelcomeMessage();\r\n        }\r\n    });\r\n\r\n    closeChatBtn.addEventListener('click', function () {\r\n        chatWindow.classList.remove('show');\r\n        chatOverlay.classList.add('hidden');\r\n        document.body.classList.remove('no-scroll');\r\n        setTimeout(() => chatWindow.classList.add('hidden'), 500);\r\n    });\r\n\r\n    chatOverlay.addEventListener('click', function () {\r\n        chatWindow.classList.remove('show');\r\n        chatOverlay.classList.add('hidden');\r\n        document.body.classList.remove('no-scroll');\r\n        setTimeout(() => chatWindow.classList.add('hidden'), 500);\r\n    });\r\n\r\n    sendMessageBtn.addEventListener('click', function () {\r\n        sendMessage();\r\n    });\r\n\r\n    chatInput.addEventListener('keypress', function (e) {\r\n        if (e.key === 'Enter') {\r\n            sendMessage();\r\n        }\r\n    });\r\n\r\n    function forceReflow(element) {\r\n        element.offsetHeight;\r\n    }\r\n\r\n    function generateSessionId() {\r\n        const timestamp = new Date().getTime();\r\n        const randomNum = Math.floor(Math.random() * 10000) + 1;\r\n        return `${timestamp}-${randomNum}`;\r\n    }\r\n\r\n    async function fetchWelcomeMessage() {\r\n        try {\r\n            const response = await fetch(`https://chat.swiss-bot.com/api/welcome_message?bot_id=${botId}`);\r\n            const data = await response.json();\r\n            const welcomeMessage = data.welcome_message || \"Welcome to your virtual assistant! ðŸ˜Š How can I assist you today?\";\r\n            appendMessage(welcomeMessage, 'bot');\r\n        } catch (error) {\r\n            console.error('Error fetching welcome message:', error);\r\n            appendMessage(\"Failed to load welcome message from server.\", 'bot');\r\n        }\r\n    }\r\n\r\n    async function sendMessage() {\r\n        const message = chatInput.value.trim();\r\n        if (message) {\r\n            appendMessage(message, 'user');\r\n            chatInput.value = '';\r\n            setLoading(true);\r\n            let currentBotMessage = '';\r\n\r\n            const maxRetries = 3;\r\n            let retryCount = 0;\r\n\r\n            const attemptConnection = () => {\r\n                return new Promise((resolve, reject) => {\r\n                    const eventSource = new EventSource(`https://chat.swiss-bot.com/api/chatbot_response?user_input=${encodeURIComponent(message)}&session_id=${sessionId}&bot_id=${botId}&language=english`);\r\n\r\n                    let isFirstMessage = true;\r\n                    let timeoutId;\r\n\r\n                    eventSource.onmessage = (event) => {\r\n                        const chunk = event.data;\r\n                        if (chunk !== 'end of response') {\r\n                            if (isFirstMessage) {\r\n                                setLoading(false);\r\n                                isFirstMessage = false;\r\n                                clearTimeout(timeoutId);\r\n                            }\r\n                            const parsedChunk = chunk.replace(/<newline>/g, '\\n');\r\n                            currentBotMessage += parsedChunk;\r\n                            updateBotMessage(currentBotMessage);\r\n                            scrollToBottom();\r\n                        }\r\n                    };\r\n\r\n                    eventSource.onerror = (error) => {\r\n                        console.error('Error fetching response:', error);\r\n                        if (isFirstMessage) {\r\n                            reject(new Error('Failed to get response from server.'));\r\n                        }\r\n                        eventSource.close();\r\n                    };\r\n\r\n                    eventSource.addEventListener('end', () => {\r\n                        updateBotMessage(currentBotMessage);\r\n                        eventSource.close();\r\n                        setLoading(false);\r\n                        scrollToBottom();\r\n                        resolve();\r\n                    });\r\n\r\n                    timeoutId = setTimeout(() => {\r\n                        if (isFirstMessage) {\r\n                            eventSource.close();\r\n                            reject(new Error('No response received from server.'));\r\n                        }\r\n                    }, 8000);\r\n                });\r\n            };\r\n\r\n            const retryConnection = async () => {\r\n                while (retryCount < maxRetries) {\r\n                    try {\r\n                        await attemptConnection();\r\n                        return;\r\n                    } catch (error) {\r\n                        retryCount++;\r\n                        console.log(`Attempt ${retryCount} failed. Retrying...`);\r\n                        if (retryCount >= maxRetries) {\r\n                            setLoading(false);\r\n                            appendMessage(`Failed to get response after ${maxRetries} attempts.`, 'bot');\r\n                            throw error;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            try {\r\n                await retryConnection();\r\n            } catch (error) {\r\n                console.error('Error fetching response:', error);\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateBotMessage(text) {\r\n        const lastMessage = chatBody.lastElementChild;\r\n        if (lastMessage && lastMessage.classList.contains('widget-bot-message')) {\r\n            lastMessage.innerHTML = marked.parse(text);\r\n        } else {\r\n            appendMessage(text, 'bot');\r\n        }\r\n    }\r\n\r\n    function appendMessage(text, sender) {\r\n        const messageElement = document.createElement('div');\r\n        messageElement.className = `widget-message widget-${sender}-message`;\r\n\r\n        // Render Markdown for bot messages\r\n        if (sender === 'bot') {\r\n            messageElement.innerHTML = marked.parse(text);\r\n        } else {\r\n            messageElement.textContent = text;\r\n        }\r\n\r\n        chatBody.appendChild(messageElement);\r\n        scrollToBottom();\r\n    }\r\n\r\n    function scrollToBottom() {\r\n        chatBody.scrollTop = chatBody.scrollHeight;\r\n    }\r\n\r\n    function setLoading(isLoading) {\r\n        if (isLoading) {\r\n            const loadingDots = document.createElement('div');\r\n            loadingDots.className = 'loading-dots';\r\n            loadingDots.innerHTML = '<div></div><div></div><div></div>';\r\n            chatBody.appendChild(loadingDots);\r\n            scrollToBottom();\r\n        } else {\r\n            const loadingDots = document.querySelector('.loading-dots');\r\n            if (loadingDots) {\r\n                loadingDots.remove();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninitializeChatWidget();\r\n\n\n//# sourceURL=webpack://swiss_bot_widget/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;